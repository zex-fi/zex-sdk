[build-system]
requires = ["pdm-backend==2.1.8"]
build-backend = "pdm.backend"

[project]
name = "zex.sdk"
requires-python = ">=3.11,<3.12"
dynamic = ["version"]
description = "Python client for Zex exchange."
authors = [
    {name = "Sadegh Moayedizadeh", email = "sadegh.moayedizadeh@gmail.com"},
]
readme = "README.md"
license = {text = "CC BY-NC"}
dependencies = [
    "coincurve>=21.0.0,<22",
    "eth-hash>=0.7.0,<1",
    "httpx>=0.28.0,<1",
    "pycryptodome>=3.23.0,<4",
    "pydantic>=2.10.6,<3",
    "pydantic-settings>=2.1.0,<3",
    "websockets_proxy>=0.1.3,<1",
    "websockets>=15.0.1,<16",
    "eth-typing>=5.2.1",
]

[tool.pdm.dev-dependencies]
lint = [
    "autoflake==2.2.1",
    "black==23.12.1",
    "flake8==7.0.0",
    "flake8-absolute-import==1.0.0.2",  # Plugin to require absolute imports.
    "flake8-annotations==2.9.1",  # A plugin for Flake8 that detects the absence of PEP 3107-style function annotations.
    "flake8-bugbear==24.2.6",  # Finding likely bugs and design problems in your program.
    "flake8-class-attributes-order==0.1.3",  # An extension for flake8 to report on wrong class attributes order and class level logic.
    "flake8-comprehensions==3.14.0",  # Helps you write better list/set/dict comprehensions.
    "flake8-docstrings==1.7.0",  # A simple module that adds an extension for the pydocstyle tool to flake8.
    "flake8-eradicate==1.5.0",  # A flake8 plugin to find commented out (or so called "dead") code.
    "flake8-internal-name-import==1.0.1",  # Plugin that reports imports of protected names.
    "flake8-logging==1.6.0",  # Reports issues in using the standard library logging module.
    "flake8-mutable==1.2.0",  # Detect usage of mutable objects as default values for arguments.
    "flake8-new-union-types==0.4.1",  # Plugin to enforce new Union/Optional syntax Foo | Bar | None defined in PEP 604.
    "flake8-pep585==0.1.7",  # Enforce new style annotations from PEP585 such as list[int] instead of typing.List[int].
    "flake8-print==5.0.0",  # Report print statement.
    "flake8-pyproject==1.2.3",  # Flake8 plug-in loading the configuration from pyproject.toml.
    "flake8-pytest-style==2.0.0",  # Checks for common style issues or inconsistencies with pytest-based tests.
    "flake8-quotes==3.3.2",  # Extension for checking quotes in python.
    "flake8-simplify==0.20.0",  # Plugin that helps you to simplify code.
    "flake8-super==0.1.3",  # Python 3 super() check for flake8.
    "flake8-use-fstring==1.4",  # Report %-formatting and str.format.
    "flake8-useless-assert==0.4.4",  # Detect useless assert statements.
    "flake8-variables-names==0.0.6",  # An extension for flake8 that helps to make more readable variables names.
    "import-linter==2.1",
    "isort==5.13.2",
    "pep8-naming==0.13.3",  # Flake8 plugin the checks the PEP-8 naming conventions.
    "tryceratops==2.3.2",  # Flake8 plugin that prevents exception handling antipatterns.
    "vulture==2.11",
]
check = [
    "diskcache-stubs==5.6.3.5.20240619",
    "mypy==1.8.0",
    "types-pyyaml>=6,<7",
    "types-requests>=2.31.0.6",
]
test = [
    "pytest==7.4.4",
    "pytest-asyncio==0.21.2",
    "pytest-cov==5.0.0",
    "pytest-csv==3.0.0",
    "pytest-env==1.1.3",
    "pytest-html==4.1.1",
    "pytest-repeat==0.9.3",
    "pytest-rerunfailures==15.0",
    "pytest-socket==0.7.0",
    "pytest-xdist==3.6.1",
    "requests-mock==1.11.0",
]

[tool.pdm.scripts]
echo = "python -c 'print(\"{args}\")'"

flake8 = "flake8 {args:.}"
black = "black {args:.}"
lint-imports = "lint-imports {args}"
isort = "isort {args:.}"
vulture = "vulture {args}"
autoflake = "autoflake {args:.}"

# Unfortunately, the redisvl library overrides the mypy entry point,
# so we should use the module format.
mypy = "python -m mypy {args:.}"

dmypy = "dmypy run {args:.}"
pytest = "pytest {args:.}"
fmt = {composite = [
    "autoflake {args:.}",
    "black {args:.}",
    "isort {args:.}",
]}
lint = {keep_going = true, composite = [
    "echo ========================== flake8 ==========================",
    "flake8 {args:.}",
    "echo ========================== isort ==========================",
    "isort {args:.} --check-only",
    "echo ========================== black ==========================",
    "black {args:.} --check",
    "echo ========================== autoflake ==========================",
    "autoflake {args:.} --check --quiet",
    "echo ========================== lint-imports ==========================",
    "lint-imports {args}",
    "echo ========================== vulture ==========================",
    "vulture {args:.}",
]}
check = {composite = [
    "mypy {args:.}",
]}
dcheck = {composite = [
    "dmypy {args:.}",
]}
test = {composite = [
    "pytest {args:.}",
]}

unittest = {composite = [
    "pytest tests/unit {args:.}",
]}

systemtest = {composite = [
    "pytest tests/system {args:.}",
]}

[tool.pdm.version]
source = "scm"
tag_regex = '^v(?P<version>\d+\.\d+\.\d+(-(alpha|beta|dev|rc))?)$'

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = ["--import-mode=importlib", "--cov-context=test", "--disable-warnings"]
pythonpath = [".", "src"]
markers = [
    "chargable"
]
asyncio_mode = "auto"

[tool.flake8]
exclude = [
    ".venv",
    "venv",
    ".env",
    "env",
    "build",
    "dist",
]
per-file-ignores = [
    "__init__.py:F401,ABS101",
    "conftest.py:F401,F403,E501",
]
extend-ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", "D200", "D202", "D301",
    "ANN101", "ANN102",
    "SIM117",
    "Q003",
    "TRY002", "TRY003",
    "LOG005", "TRY400",  # Only the most outer layer should log the exception.

    # TODO: These should be removed.
    "LOG011", "VNE003",
]
inline-quotes = "double"
eradicate-whitelist-extend = "isort.*"
max-line-length = 120
style = "sphinx"
arg-type-hints-in-docstring = false
skip-checking-raises = true
check-return-types = false
count = true
class-attributes-order = [
    "meta_class",
    "nested_class",
    "constant",
    "field",
    "__new__",
    "__init__",
    "__post_init__",
    "model_post_init",
    "static_method",
    "class_method",
    "property_method",
    "magic_method",
    "method",
    "private_property_method",
    "private_method",
    "private_class_method",
    "private_static_method",
]

[tool.importlinter]
root_package = "zex.sdk"

[[tool.importlinter.contracts]]
name = "Root Layers"
type = "layers"
containers = ["zex.sdk"]
layers = [
    "websocket",
    "client",
    "data_types",
]
exhaustive = true

[tool.mypy]
exclude = [
    "^venv/",
    "^\\.venv/",
    "^env/",
    "^\\.env/",
    "^build/",
    "^dist/",
]
# Allows Type[T] to refer to abstract classes, which is not otherwise supported.
# See https://github.com/python/mypy/issues/4717
disable_error_code = "type-abstract"

mypy_path = "src/"
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = true

strict_equality = true
implicit_reexport = false

warn_unused_configs = true
warn_unused_ignores = true
warn_return_any = true
warn_redundant_casts = true
warn_unreachable = true
check_untyped_defs = true

pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true
show_traceback = true

plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
# This list should be checked periodically. Maybe, one of them becomes type-safe.
module = []
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.coverage.html]
show_contexts = true

[tool.black]
preview = true
line_length = 88

[tool.isort]
profile = "black"
line_length = 88

[tool.autoflake]
recursive = true
remove_all_unused_imports = true
ignore_pass_after_docstring = true
in_place = true
exclude = ["conftest.py", "__init__.py"]

[tool.vulture]
paths = ["."]
exclude = [
    ".venv/",
    "venv/",
    ".env/",
    "env/",
    "build/",
    "dist/"
]
ignore_decorators = [
    "@root_router.*",
    "@override",
    "@abstractmethod",
    "@root_validator"
]
ignore_names  = [
    "to_type",
    "model_config",
    "*_cli",
    "x_*",
    "mock_async_session",
    "mock_events_database",
    "exc_type",
    "tb",
    "code",
    "reason",
]
sort_by_size = true
min_confidence = 80
